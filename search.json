[{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 STTileMaker authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/articles/Example analysis.html","id":"goal-of-this-analysis","dir":"Articles","previous_headings":"","what":"Goal of this Analysis","title":"How to use STTileMaker + an Example Analysis","text":"current rotation project within Dr. Jean Fan’s lab, tasked predicting gene expression levels analyzing H&E-stained images lens spatial transcriptomics (ST) data. accomplish , employed technique known Hist2ST, method established 2022 widely recognized usefulness Python environments. Despite initial challenges deciphering adapting Hist2ST code data sets, (finally) successfully ran Hist2ST data. pivotal component work involved developing function segment ST data distinct “tiles” according spatial positioning spot. Recognizing significant portion ST research community prefers R data analysis, motivated enhance accessibility applicability workflow. led creation analogous function R, aptly named STTileMaker. STTileMaker package designed straightforward objective: generate segmented tiles H&E images align precise locations spots within. , can successfully read ST data therefore used future downstream analysis. capability sets stage broad spectrum subsequent analytical procedures, including correlation RGB values gene expression, classification spot characteristics, eventual integration tiles R-based algorithm poised predict gene expression patterns. context data analysis, demonstrating gene expression correlates RGB intensity within H&E image. Questions analysis become: gene correlated RGB intensities H&E image? gene least correlated RGB intensities H&E image? one channel predict better others? data interest freely accessible (Re)Building Kidney Consortium database, offering comprehensive spatial gene expression profile created using Space Ranger 1.2.1. data encapsulates gene expression kidneys 8-10 week old C57BL6/J female mouse, specifically captured 12-hour mark following bilateral ischemia reperfusion injury. detailed insights, including data dictionary data’s structure, encourage visiting provided link. Due large size dataset, possible host GitHub. Nonetheless, ’ve included snippet code , executed, facilitate direct download dataset locally designated folder named “data.” hope proves helpful!","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/articles/Example analysis.html","id":"reading-in-the-data","dir":"Articles","previous_headings":"","what":"Reading in the Data","title":"How to use STTileMaker + an Example Analysis","text":"Now, lets begin analysis. First read necassary packages analysis. code code snippit gather data website save folder called “data.” step crucial analysis, obtaining dataset. However, free use ST dataset like STTileMaker. Since data downloaded, ready read “STTileMaker_read_data” function within package. object “data” within code, read data, list lists containing important features needed spot positions, cleaned expression data, etc. functions within package please take look docs section details. data read , can create tiles spot’s location running “STTileMaker_make_tiles” function. output list images, image “tile” “patch” H&E image contains single spot. ensure worked successfully, run “STTileMaker_plot_tile” function plot single tile view. NOTE: Unfortunately, R-markdown allow knit function (). Therefore, like replicate code NEED change directory data located.   package continues evolve, additional functions incorporated. However, selection represents full range functionalities available moment. Now let’s begin analysis!","code":"# read in functions library(STTileMaker) # custom functions library(ggplot2) # for plotting library(tidyverse) # for data manipulation library(here) # for file archiving library(paletteer) # for colors library(ggrepel) # for plotting # if file doesn't exist, download the data # if (!file.exists(here(\"data/f12hr_140_processed/\"))) { if (!file.exists(\"~/Desktop/jhu/rotations/fan/STTileMaker/data/f12hr_140_processed/outs/\")) {      # message it wasn't found   message(\"File not found, downloading now...\")    # create dir if needed   # dir.create(here(\"data/\"))   dir.create(\"~/Desktop/jhu/rotations/fan/STTileMaker/data/\")    # URL of the file   url = \"https://www.atlas-d2k.org/hatrac/resources/rnaseq/study/17-E9P0/study_files/64ee25aacce94ff9a42850f158097813.tar.gz:JW6WAUMAZJ5TT3SF2LGG3C6V2U\"    # Destination file path (you can change this to your desired path and filename)   # dest_file = here(\"data/downloaded_file.tar.gz\")   dest_file = \"~/Desktop/jhu/rotations/fan/STTileMaker/data/downloaded_file.tar.gz\"    # Download the file   download.file(url, dest_file, mode = \"wb\")    # Assuming the file is named \"downloaded_file.tar.gz\" and is in the current working directory   file_name = \"downloaded_file.tar.gz\"    # Extract the file   # untar(here(\"data/downloaded_file.tar.gz\"), exdir = here(\"data/\"))   untar(dest_file, exdir = \"~/Desktop/jhu/rotations/fan/STTileMaker/data/\")    # tarfile_list = untar(file_name, list = TRUE)   # print(tarfile_list)    # message when done   message(\"Finished!\") } # read in data # data = STTileMaker_read_data(here::here(\"data/f12hr_140_processed/outs/\")) data =STTileMaker_read_data(\"~/Desktop/jhu/rotations/fan/STTileMaker/data/f12hr_140_processed/outs/\") #> [1] \"Gene Matrix Dimensions: 32285\" \"Gene Matrix Dimensions: 1893\"  #>                       x    y #> CTATGTCTATTGAAAC-1 4609 2032 #> TGTCCCGACATAGCAC-1 4746 2032 #> ATATTCCCACAGGTCA-1 4883 2033 #> CACCATCGGAGGAGAC-1 5020 2033 #> CTTAACTTCGAAGTAC-1 5158 2034 #> TACCAGCTAGGTTTAA-1 5295 2034  # make tiles tiles = STTileMaker_make_tiles(data) #> [1] \"Making tiles...\" #> [1] \"Done!\"  # check to see it works STTileMaker_plot_tile(tiles, 1) STTileMaker_plot_tile(tiles, 100) # it works!!"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/articles/Example analysis.html","id":"data-analysis","dir":"Articles","previous_headings":"","what":"Data Analysis","title":"How to use STTileMaker + an Example Analysis","text":"first plot shown distribution mean values red channel. see normally distributed fairly high mean (range 0-1). Next see distribution correlation red channel gene expression per tile. Unfortunately, see strong correlation genes within red channel. However, red channel found best correlated channel gene expression compared blue green. two channel results shown , encourage try confirm!  Next, wanted see highest correlated gene lowest correlated gene looking red channel.  see, highest correlated gene Kap correlation 0.41. particularly strong correlation, better nothing serves great base future analysis! see lots spots within tissue 0 expression, big leap log expression 2 higher. interesting see, something worth diving understand! Now let’s see highest correlated gene, Kap, looks like tissue.  awesome figure allows us see spatially gene highly expressed lowly expressed. Interestingly, gene high expression within tissue lower expression outside. see essentially gradient expression gene, certainly cool find. Remember red channel able pretty well comparing genes expression correlation 0.41. Let’s thing least correlated gene!  correlation -0.27, Igfbp5 least correlated gene comparing gene expression red channel intensity. see lot tiles contain expression gene, tiles displaying clear negative relationship. Let’s take look gene expression tissue just idea look like.  Well, surprise isn’t good! , seems bit sporadic place likely use gene downstream analysis. Finally, wanted show one feature looked analysis: red channel mean expression minus blue channel.  Oddly enough, found genes higher correlation using mean red channel values minus blue channel values. two shown highly correlated gene least correlated gene.","code":"# grab the mean of each red channel in each tile features = map_dbl(tiles, ~ mean(.x[,,1])) # red channel  # set names of the features names(features) = names(tiles)  # plot the histogram  ggplot(data = data.frame(features), aes(x = features)) +    geom_histogram() +   theme_linedraw() +   labs(     x = \"Mean Value of Red Channel\",     y = \"Count\",     title = \"Mean Values of Tiles within the Red Channel\",     subtitle = str_wrap(paste0(\"Mean values of the red channel per tile. Note that it is fairly high for all tiles                                located within tissue and is characterized by a normal distribution.\"), width = 100),     caption = \"Data Source: Kidney Consortium database\"   )  +   theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), plot.title =            element_text(face = \"bold\", hjust = 0.5), axis.text.x = element_text(size = 10)) # normalize the data normFactor = colSums(as.matrix(data$geneCountsClean)) mat = t(t(as.matrix(data$geneCountsClean))/normFactor) mat = log10(mat * 1e6 +1)  # get correlation of each tile with gene expression cors_list = map(rownames(mat), ~ cor(mat[.x, ], features)) # Convert the list to a numeric vector cors = unlist(cors_list)   # plot the histogram  ggplot(data = data.frame(cors), aes(x = cors)) +    geom_histogram() +   labs(     x = \"Correlation\",     y = \"Count\",     title = paste0(\"Mean Correlation between the Red Channel and Gene Expression\"),     subtitle = str_wrap(paste0(\"Correlation histogram of gene expression with the tissue and                                 red channel values. Note the little deviation from 0, as only a few                                genes are found to be correlated.\"), width = 100),     caption = \"Data Source: Kidney Consortium database\"   )  +   theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), plot.title =            element_text(face = \"bold\", hjust = 0.5), axis.text.x = element_text(size = 10)) # get best correlated gene # Assuming 'cors' is a named numeric vector cors_df = tibble(name = rownames(mat), value = cors)  # Finding the names with the minimum 'cors' value g_max = cors_df |>   filter(value == max(value, na.rm = TRUE)) |>   pull(name)  # get scaled expression of gene ggexp = scale(mat[g_max,])[,1] # get locations df = data.frame(data$posClean, ggexp)   # Calculate the correlation coefficient corr_coefficient = cor(mat[g_max, ], features)  ggplot() +    geom_point(aes(x = mat[g_max,], y = features)) +   geom_smooth(aes(x = mat[g_max,], y = features), method = \"lm\") +   theme_linedraw() +   labs(     x = \"Log Gene Expression\",     y = \"Mean value of Red Channel\",     title = paste0(\"Correlation of \",g_max,\" Expression and Mean Red Channel value\"),     subtitle = str_wrap(paste0(\"Mean expression per tile of gene \", g_max,\". This is the most correlated gene                                with the red channel values.\"), width = 100),     caption = \"Data Source: Kidney Consortium database\"   )  +   annotate(\"text\", x = -Inf, y = -Inf, label = sprintf(\"Correlation: %.2f\", corr_coefficient),             hjust = -0.1, vjust = -.2, size = 5, color = \"red\") +  # customize theme   theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), plot.title =            element_text(face = \"bold\", hjust = 0.5), axis.text.x = element_text(size = 10)) # now we can plot with the image x = grid::rasterGrob(data$img,                       interpolate = FALSE,                       width = grid::unit(1, \"npc\"),                       height = grid::unit(1, \"npc\")) # plot actual image plt = ggplot() +     annotation_custom(         grob = x,         xmin = 0,         xmax = ncol(x$raster),         ymin = 0,         ymax = nrow(x$raster)) +     coord_fixed(         xlim = c(0, ncol(x$raster)),         ylim = c(0, nrow(x$raster))) +     theme_void()  # plot expression of gene plt + geom_point(aes(x = x, y = y,                      color = ggexp),                  size = data$r/5,                  data = df) +     scale_colour_gradient2(         low = \"blue\",         mid = \"white\",         high = \"red\") +    labs(     title = paste0(\"Mean Expression of \",g_max,\" per Spot\"),                    color = \"Mean Expression\") +  # customize theme   theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), plot.title =            element_text(face = \"bold\", hjust = 0.5)) # get worst correlated gene  # Finding the names with the minimum 'cors' value g_min = cors_df |>   filter(value == min(value, na.rm = TRUE)) |>   pull(name)  # get scaled expression of gene ggexp = scale(mat[g_min,])[,1] # get locations df = data.frame(data$posClean, ggexp)  # Calculate the correlation coefficient corr_coefficient = cor(mat[g_min, ], features)  ggplot() +    geom_point(aes(x = mat[g_min,], y = features)) +   geom_smooth(aes(x = mat[g_min,], y = features), method = \"lm\") +   theme_linedraw() +   labs(     x = \"Log Gene Expression\",     y = \"Mean value of Red Channel\",     title = paste0(\"Correlation of \",g_min,\" Expression and Mean Red Channel value\"),     subtitle = str_wrap(paste0(\"Mean expression per tile of gene \", g_min,\". This is the least correlated gene                                with the red channel values.\"), width = 100),     caption = \"Data Source: Kidney Consortium database\"   )  +   annotate(\"text\", x = -Inf, y = -Inf, label = sprintf(\"Correlation: %.2f\", corr_coefficient),             hjust = -0.1, vjust = -.2, size = 5, color = \"red\") +  # customize theme   theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), plot.title =            element_text(face = \"bold\", hjust = 0.5), axis.text.x = element_text(size = 10)) # plot expression of gene plt + geom_point(aes(x = x, y = y,                      color = ggexp),                  size = data$r/5,                  data = df) +     scale_colour_gradient2(         low = \"blue\",         mid = \"white\",         high = \"red\") +    labs(     title = paste0(\"Mean Expression of \",g_min,\" per Spot\"),                    color = \"Mean Expression\") +  # customize theme   theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), plot.title =            element_text(face = \"bold\", hjust = 0.5)) # grab the mean of each red channel in each tile features = map_dbl(tiles, ~ mean(.x[,,1]) - mean(.x[,,3])) # red channel - blue channel  # set names of the features names(features) = names(tiles)  # get correlation of each tile with gene expression cors_list = map(rownames(mat), ~ cor(mat[.x, ], features)) # Convert the list to a numeric vector cors = unlist(cors_list)  # get best correlated gene # Assuming 'cors' is a named numeric vector cors_df = tibble(name = rownames(mat), value = cors)  # Finding the names with the minimum 'cors' value g_max = cors_df |>   filter(value == max(value, na.rm = TRUE)) |>   pull(name)  # get scaled expression of gene ggexp_max = mat[g_max,] # get locations df = data.frame(data$posClean, ggexp_max) # Use the rename function from dplyr df = df |>   rename(!!g_max := ggexp_max)  # Finding the names with the minimum 'cors' value g_min = cors_df |>   filter(value == min(value, na.rm = TRUE)) |>   pull(name)  # get scaled expression of gene ggexp_min = mat[g_min,]  # bind columns together df = bind_cols(df,ggexp_min) df = bind_cols(df,features) # rename names(df)[names(df) == \"...4\"] = g_min names(df)[names(df) == \"...5\"] = \"redminusblue\"   # Transform data to long format long_data = df |>   gather(key = \"gene\", value = \"expression\", g_max, g_min)  # Create the plot with ggplot2 ggplot(long_data, aes(x = expression, y = redminusblue)) +   geom_point() +   geom_smooth(method = \"lm\") +   facet_wrap(~ gene) +   theme_linedraw() +   labs(     x = \"Log Gene Expression\",     y = \"Mean value of Red Channel minus Blue Channel\",     title = paste0(\"Mean Correlation between Red minus Blue Channel and Gene Expression\"),     subtitle = str_wrap(paste0(\"Two plots are displayed with the highest correlated gene, \", g_max,\", with a                                 correlation of \",round(max(cors_df$value, na.rm = TRUE), 2),                                \", and the lowest correlated gene, \",g_min,\" with a correlation of                                \",round(min(cors_df$value, na.rm = TRUE), 2),                                \".\"), width = 95),     caption = \"Data Source: Kidney Consortium database\"   )  +   theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), plot.title =            element_text(face = \"bold\", hjust = 0.5), axis.text.x = element_text(size = 10))"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/articles/Example analysis.html","id":"final-thoughts","dir":"Articles","previous_headings":"","what":"Final Thoughts","title":"How to use STTileMaker + an Example Analysis","text":"data analysis demonstration, illustrated effective execution functions within STTileMaker, leveraging tool initiate spatial transcriptomics (ST) data analysis, presented compelling findings. Moving forward, aim expand package’s capabilities introducing additional functions enhancements sophisticated analysis ST tile data.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/articles/Example analysis.html","id":"functions-used","dir":"Articles","previous_headings":"","what":"Functions Used","title":"How to use STTileMaker + an Example Analysis","text":"must use least six different functions dplyr, tidyr, lubridate, stringr, forcats: tibble() - tidyr filter() - dplyr pull() - dplyr rename() - dplyr bind_cols() - dplyr gather() - tidyr str_wrap() - stringr must use least two functions purrr: map_dbl() - purrr map() - purrr analysis include least three plots using least three different geom_() functions ggplot2 (another package geom_() functions)“: geom_point() - ggplot2 geom_histogram() - ggplot2 geom_smooth() - ggplot2 least one plot using type faceting (facet_grid() facet_wrap()).: Got !","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Caleb Hallinan. Author, maintainer.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hallinan C (2023). STTileMaker: Make Tiles Spot Spatial Transcriptomics Dataset. R package version 0.0.0.9000, https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/.","code":"@Manual{,   title = {STTileMaker: Make Tiles of each Spot in a Spatial Transcriptomics Dataset},   author = {Caleb Hallinan},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/}, }"},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"project-description","dir":"","previous_headings":"","what":"Project Description","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"See: https://www.stephaniehicks.com/jhustatprogramming2023/projects/2023-11-28-project-3/ Note: original package developed! Hence, Github link origin destination","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"package","dir":"","previous_headings":"","what":"Package","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"STTileMaker Website: https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"authorcreator","dir":"","previous_headings":"","what":"Author/Creator","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"Caleb Hallinan","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"goal-of-package","dir":"","previous_headings":"","what":"Goal of Package","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"Create image tiles spot H&E image Spatial Transcriptomics Dataset","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"STTileMaker_read_data() - reads data contains image, gene expression, various variables STTileMaker_make_tiles() - creates tiles H&E image spot STTileMaker_plot_tile() - quality check function plots single tile confirm works!","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"read-in-data","dir":"","previous_headings":"Example","what":"read in data","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"data = STTileMaker_read_data(::(“data/f12hr_140_processed/outs/”))","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"make-tiles","dir":"","previous_headings":"Example","what":"make tiles","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"tiles = STTileMaker_make_tiles(data)","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"check-to-see-it-works","dir":"","previous_headings":"Example","what":"check to see it works","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"STTileMaker_plot_tile(tiles, 1) STTileMaker_plot_tile(tiles, 100)","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"please-run-the-following-commands-in-your-r-terminal-to-install-and-use-these-functions","dir":"","previous_headings":"How to Download","what":"Please run the following commands in your R terminal to install and use these functions","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"remotes::install_github(repo = “jhu-statprogramming-fall-2023/biostat777-project3-part1-calebhallinan”) library(STTileMaker)","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"or","dir":"","previous_headings":"How to Download","what":"OR","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"Clone repository build package within R","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"id_5-website-customizations","dir":"","previous_headings":"","what":"5 Website Customizations","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"Changed bootswatch darkly Changed navbar color light Changed structure/order tabs Changed structure/order sidebar Edit footer say words using package","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/index.html","id":"notesthoughts","dir":"","previous_headings":"","what":"Notes/Thoughts:","title":"Make Tiles of each Spot in a Spatial Transcriptomics Dataset","text":"Unfortunately, able get package work vignette folder. Therefore, see direct path locations. continue look , wanted let know! cool project! glad able create function can use research :)","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_make_tiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Make tiles of each spot in a Spatial Transcriptomics Dataset — STTileMaker_make_tiles","title":"Make tiles of each spot in a Spatial Transcriptomics Dataset — STTileMaker_make_tiles","text":"Make tiles spot Spatial Transcriptomics Dataset","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_make_tiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make tiles of each spot in a Spatial Transcriptomics Dataset — STTileMaker_make_tiles","text":"","code":"STTileMaker_make_tiles(data)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_make_tiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make tiles of each spot in a Spatial Transcriptomics Dataset — STTileMaker_make_tiles","text":"data, object function STTileMaker_read_data","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_make_tiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make tiles of each spot in a Spatial Transcriptomics Dataset — STTileMaker_make_tiles","text":"H&E tiles spot returned list lists","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_make_tiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make tiles of each spot in a Spatial Transcriptomics Dataset — STTileMaker_make_tiles","text":"function make Tiles Spot Spatial Transcriptomics Dataset given correct input","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_make_tiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make tiles of each spot in a Spatial Transcriptomics Dataset — STTileMaker_make_tiles","text":"","code":"tiles = STTileMaker_make_tiles(data) #> [1] \"Making tiles...\" #> [1] \"Done!\""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_plot_tile.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a tile of a spot in a Spatial Transcriptomics Dataset — STTileMaker_plot_tile","title":"Plot a tile of a spot in a Spatial Transcriptomics Dataset — STTileMaker_plot_tile","text":"Plot tile spot Spatial Transcriptomics Dataset","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_plot_tile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a tile of a spot in a Spatial Transcriptomics Dataset — STTileMaker_plot_tile","text":"","code":"STTileMaker_plot_tile(tiles, index = 1)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_plot_tile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a tile of a spot in a Spatial Transcriptomics Dataset — STTileMaker_plot_tile","text":"tiles, tiles object function STTileMaker_make_tiles index, index tile want visualize, range 1 n number tiles","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_plot_tile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a tile of a spot in a Spatial Transcriptomics Dataset — STTileMaker_plot_tile","text":"Plot single tile","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_plot_tile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a tile of a spot in a Spatial Transcriptomics Dataset — STTileMaker_plot_tile","text":"function make plot tile spot Spatial Transcriptomics Dataset quality control check","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_plot_tile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a tile of a spot in a Spatial Transcriptomics Dataset — STTileMaker_plot_tile","text":"","code":"STTileMaker_plot_tile(tiles, 10)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads in the data that contains the image, gene expression, and various other variables — STTileMaker_read_data","title":"Reads in the data that contains the image, gene expression, and various other variables — STTileMaker_read_data","text":"Reads data contains image, gene expression, various variables","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads in the data that contains the image, gene expression, and various other variables — STTileMaker_read_data","text":"","code":"STTileMaker_read_data(directory)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads in the data that contains the image, gene expression, and various other variables — STTileMaker_read_data","text":"directory, directory ST data located","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads in the data that contains the image, gene expression, and various other variables — STTileMaker_read_data","text":"list lists : pos - original positions spots posAligned - positions spots data alignment posClean - positions spots data cleaning img - H&E image matrix form geneCounts - matrix raw data geneCountsClean - matrix cleaned standard ST data methods r - scale resizing spots scalefactor - scalefactor image cartesian scales","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_read_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reads in the data that contains the image, gene expression, and various other variables — STTileMaker_read_data","text":"function reads data contains image, gene expression, various variables","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-calebhallinan/reference/STTileMaker_read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads in the data that contains the image, gene expression, and various other variables — STTileMaker_read_data","text":"","code":"data = STTileMaker_read_data(here::here(\"data/f12hr_140_processed/outs/\")) #> [1] \"Gene Matrix Dimensions: 32285\" \"Gene Matrix Dimensions: 1893\"  #>                       x    y #> CTATGTCTATTGAAAC-1 4609 2032 #> TGTCCCGACATAGCAC-1 4746 2032 #> ATATTCCCACAGGTCA-1 4883 2033 #> CACCATCGGAGGAGAC-1 5020 2033 #> CTTAACTTCGAAGTAC-1 5158 2034 #> TACCAGCTAGGTTTAA-1 5295 2034"}]
